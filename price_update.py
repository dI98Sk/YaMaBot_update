import gspread
import requests
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

class YandexMarketUpdater:
    def __init__(self, spreadsheet_url, credentials_file, oauth_token, business_id):
        self.SPREADSHEET_URL = spreadsheet_url
        self.CREDENTIALS_FILE = credentials_file
        self.OAUTH_TOKEN = oauth_token
        self.BUSINESS_ID = business_id

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
        self.scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        self.creds = ServiceAccountCredentials.from_json_keyfile_name(self.CREDENTIALS_FILE, self.scope)
        self.client = gspread.authorize(self.creds)
        self.sheet = self.client.open_by_url(self.SPREADSHEET_URL).sheet1

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç API
        self.headers_auth = {
            "Authorization": f"Bearer {self.OAUTH_TOKEN}",
            "Content-Type": "application/json"
        }

    def get_offers_prices(self):
        rows = self.sheet.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        offers_prices = []

        for row in rows:
            offer_id = row[1].strip()
            if not offer_id:
                continue

            price_str = row[3].replace(",", ".").strip()
            discount_str = row[4].replace(",", ".").strip()

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã –∏–ª–∏ —Å–∫–∏–¥–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
            if not price_str or not discount_str:
                print(f"[‚ÑπÔ∏è] –¢–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã: {offer_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                continue

            try:
                price = float(price_str)
                discount_base = float(discount_str)

                if price <= 0 or discount_base <= 0:
                    print(f"[‚ö†Ô∏è] –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ —Å–∫–∏–¥–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {offer_id}. –ü—Ä–æ–ø—É—â–µ–Ω.")
                    continue

            except ValueError as e:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {row} (–û—à–∏–±–∫–∞: {e})")
                continue

            offers_prices.append({
                "offerId": offer_id,
                "price": {
                    "value": str(price),
                    "discountBase": str(discount_base),
                    "currencyId": "RUR"
                }
            })

        return offers_prices

    def update_prices(self, offers_prices):
        url_prices = f"https://api.partner.market.yandex.ru/v2/businesses/{self.BUSINESS_ID}/offer-prices/updates"
        resp_prices = requests.post(url_prices, json={"offers": offers_prices}, headers=self.headers_auth)

        if resp_prices.status_code == 200:
            print(f"[‚úÖ] –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(offers_prices)} –ø–æ–∑–∏—Ü–∏–π.")
        else:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {resp_prices.status_code}")
            try:
                print(resp_prices.json())  # üí° –õ–æ–≥–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            except:
                print(resp_prices.text)

    def run(self):
        print(f"[üïí] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        offers_prices = self.get_offers_prices()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {len(offers_prices)}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
        self.update_prices(offers_prices)

        print(f"\n[üïí] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


